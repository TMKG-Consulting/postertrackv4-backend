generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                @id @default(autoincrement())
  firstname                 String?
  lastname                  String?
  email                     String             @unique
  phone                     String?
  address                   String?
  password                  String
  role                      Role
  additionalEmail           String[]           @default([])
  industryId                Int?
  advertiserId              Int?
  createdAt                 DateTime           @default(now())
  profilePicture            String?            @default("https://storage.googleapis.com/postertrack-bucket-images/user.png")
  status                    Boolean            @default(true)
  updatedAt                 DateTime           @updatedAt
  campaignsAsAccountManager Campaign[]         @relation("AccountManagerRelation")
  campaignsAsClient         Campaign[]         @relation("ClientRelation")
  complianceReports         ComplianceReport[] @relation("FieldAuditor")
  siteAssignments           SiteAssignment[]   @relation("FieldAuditorRelation")
  advertiser                Advertiser?        @relation(fields: [advertiserId], references: [id])
  industry                  Industry?          @relation(fields: [industryId], references: [id])
  statesCovered             State[]            @relation("UserStates")
}

model Industry {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Advertiser {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  brands Brand[]
  users  User[]
}

model Campaign {
  id               Int                @id @default(autoincrement())
  clientId         Int
  accountManagerId Int
  siteList         Json
  uploadedAt       DateTime           @default(now())
  editedAt         DateTime?
  totalSites       Int
  campaignID       String             @unique
  accountManager   User               @relation("AccountManagerRelation", fields: [accountManagerId], references: [id])
  client           User               @relation("ClientRelation", fields: [clientId], references: [id])
  ComplianceReport ComplianceReport[]
  siteAssignments  SiteAssignment[]   @relation("CampaignRelation")
}

model SiteAssignment {
  id               Int                @id @default(autoincrement())
  campaignId       Int
  siteCode         String
  fieldAuditorId   Int
  status           String             @default("pending")
  editedAt         DateTime?
  uploadedAt       DateTime           @default(now())
  ComplianceReport ComplianceReport[]
  campaign         Campaign           @relation("CampaignRelation", fields: [campaignId], references: [id])
  fieldAuditor     User               @relation("FieldAuditorRelation", fields: [fieldAuditorId], references: [id])
}

model ComplianceReport {
  id               Int            @id @default(autoincrement())
  siteCode         String
  campaignId       Int
  advertiser       String
  brand            String
  address          String
  boardType        String
  mediaOwner       String
  message          String
  structureId      Int
  posterId         Int
  illuminationId   Int
  routeId          Int
  sideId           Int
  comment          String
  imageUrls        String[]      
  geolocations     Json
  uploadedBy       Int
  uploadedAt       DateTime       @default(now())
  status           String         @default("pending")
  siteAssignmentId Int?
  bsv              String         @default("0%")
  city             String
  campaign         Campaign       @relation(fields: [campaignId], references: [id])
  Illumination     Illumination   @relation(fields: [illuminationId], references: [id])
  Poster           Poster         @relation(fields: [posterId], references: [id])
  Route            Route          @relation(fields: [routeId], references: [id])
  Side             Side           @relation(fields: [sideId], references: [id])
  siteAssignment   SiteAssignment? @relation(fields: [siteAssignmentId], references: [id], onDelete: Cascade)
  Structure        Structure      @relation(fields: [structureId], references: [id])
  FieldAuditor     User           @relation("FieldAuditor", fields: [uploadedBy], references: [id])

  @@unique([siteCode, campaignId])
}

model Region {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  states State[] @relation("RegionStates")
}

model State {
  id       Int    @id @default(autoincrement())
  name     String
  regionId Int
  cities   City[]
  region   Region @relation("RegionStates", fields: [regionId], references: [id])
  users    User[] @relation("UserStates")
}

model City {
  id      Int    @id @default(autoincrement())
  name    String
  stateId Int
  state   State  @relation(fields: [stateId], references: [id])
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String
  brands Brand[]
}

model Brand {
  id           Int        @id @default(autoincrement())
  name         String
  advertiserId Int
  categoryId   Int
  logo         String?
  advertiser   Advertiser @relation(fields: [advertiserId], references: [id])
  category     Category   @relation(fields: [categoryId], references: [id])
}

model Structure {
  id               Int                @id @default(autoincrement())
  name             String
  ComplianceReport ComplianceReport[]
}

model Poster {
  id               Int                @id @default(autoincrement())
  name             String
  ComplianceReport ComplianceReport[]
}

model Illumination {
  id               Int                @id @default(autoincrement())
  name             String
  ComplianceReport ComplianceReport[]
}

model Route {
  id               Int                @id @default(autoincrement())
  name             String
  ComplianceReport ComplianceReport[]
}

model Side {
  id               Int                @id @default(autoincrement())
  name             String
  ComplianceReport ComplianceReport[]
}

enum Role {
  SUPER_ADMIN
  CHIEF_ACCOUNT_MANAGER
  ACCOUNT_MANAGER
  FIELD_AUDITOR
  CLIENT_AGENCY_USER
}
